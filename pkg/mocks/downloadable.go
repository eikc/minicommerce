// Code generated by MockGen. DO NOT EDIT.
// Source: downloadable.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	minicommerce "github.com/eikc/minicommerce"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDownloadableReader is a mock of DownloadableReader interface
type MockDownloadableReader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadableReaderMockRecorder
}

// MockDownloadableReaderMockRecorder is the mock recorder for MockDownloadableReader
type MockDownloadableReaderMockRecorder struct {
	mock *MockDownloadableReader
}

// NewMockDownloadableReader creates a new mock instance
func NewMockDownloadableReader(ctrl *gomock.Controller) *MockDownloadableReader {
	mock := &MockDownloadableReader{ctrl: ctrl}
	mock.recorder = &MockDownloadableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloadableReader) EXPECT() *MockDownloadableReaderMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDownloadableReader) Get(ctx context.Context, id string) (*minicommerce.Downloadable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*minicommerce.Downloadable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDownloadableReaderMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDownloadableReader)(nil).Get), ctx, id)
}

// GetAll mocks base method
func (m *MockDownloadableReader) GetAll(ctx context.Context) ([]minicommerce.Downloadable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]minicommerce.Downloadable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockDownloadableReaderMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDownloadableReader)(nil).GetAll), ctx)
}

// MockDownloadableWriter is a mock of DownloadableWriter interface
type MockDownloadableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadableWriterMockRecorder
}

// MockDownloadableWriterMockRecorder is the mock recorder for MockDownloadableWriter
type MockDownloadableWriterMockRecorder struct {
	mock *MockDownloadableWriter
}

// NewMockDownloadableWriter creates a new mock instance
func NewMockDownloadableWriter(ctrl *gomock.Controller) *MockDownloadableWriter {
	mock := &MockDownloadableWriter{ctrl: ctrl}
	mock.recorder = &MockDownloadableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloadableWriter) EXPECT() *MockDownloadableWriterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDownloadableWriter) Create(ctx context.Context, downloadable *minicommerce.Downloadable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, downloadable)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDownloadableWriterMockRecorder) Create(ctx, downloadable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDownloadableWriter)(nil).Create), ctx, downloadable)
}

// MockDownloadableDeleter is a mock of DownloadableDeleter interface
type MockDownloadableDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadableDeleterMockRecorder
}

// MockDownloadableDeleterMockRecorder is the mock recorder for MockDownloadableDeleter
type MockDownloadableDeleterMockRecorder struct {
	mock *MockDownloadableDeleter
}

// NewMockDownloadableDeleter creates a new mock instance
func NewMockDownloadableDeleter(ctrl *gomock.Controller) *MockDownloadableDeleter {
	mock := &MockDownloadableDeleter{ctrl: ctrl}
	mock.recorder = &MockDownloadableDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloadableDeleter) EXPECT() *MockDownloadableDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDownloadableDeleter) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDownloadableDeleterMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDownloadableDeleter)(nil).Delete), ctx, id)
}

// MockDownloadableRepository is a mock of DownloadableRepository interface
type MockDownloadableRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadableRepositoryMockRecorder
}

// MockDownloadableRepositoryMockRecorder is the mock recorder for MockDownloadableRepository
type MockDownloadableRepositoryMockRecorder struct {
	mock *MockDownloadableRepository
}

// NewMockDownloadableRepository creates a new mock instance
func NewMockDownloadableRepository(ctrl *gomock.Controller) *MockDownloadableRepository {
	mock := &MockDownloadableRepository{ctrl: ctrl}
	mock.recorder = &MockDownloadableRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloadableRepository) EXPECT() *MockDownloadableRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDownloadableRepository) Get(ctx context.Context, id string) (*minicommerce.Downloadable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*minicommerce.Downloadable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDownloadableRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDownloadableRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method
func (m *MockDownloadableRepository) GetAll(ctx context.Context) ([]minicommerce.Downloadable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]minicommerce.Downloadable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockDownloadableRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDownloadableRepository)(nil).GetAll), ctx)
}

// Create mocks base method
func (m *MockDownloadableRepository) Create(ctx context.Context, downloadable *minicommerce.Downloadable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, downloadable)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDownloadableRepositoryMockRecorder) Create(ctx, downloadable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDownloadableRepository)(nil).Create), ctx, downloadable)
}

// Delete mocks base method
func (m *MockDownloadableRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDownloadableRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDownloadableRepository)(nil).Delete), ctx, id)
}
