// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStorageWriter is a mock of StorageWriter interface
type MockStorageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockStorageWriterMockRecorder
}

// MockStorageWriterMockRecorder is the mock recorder for MockStorageWriter
type MockStorageWriterMockRecorder struct {
	mock *MockStorageWriter
}

// NewMockStorageWriter creates a new mock instance
func NewMockStorageWriter(ctrl *gomock.Controller) *MockStorageWriter {
	mock := &MockStorageWriter{ctrl: ctrl}
	mock.recorder = &MockStorageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageWriter) EXPECT() *MockStorageWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockStorageWriter) Write(ctx context.Context, location string, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, location, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockStorageWriterMockRecorder) Write(ctx, location, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorageWriter)(nil).Write), ctx, location, r)
}

// MockStorageReader is a mock of StorageReader interface
type MockStorageReader struct {
	ctrl     *gomock.Controller
	recorder *MockStorageReaderMockRecorder
}

// MockStorageReaderMockRecorder is the mock recorder for MockStorageReader
type MockStorageReaderMockRecorder struct {
	mock *MockStorageReader
}

// NewMockStorageReader creates a new mock instance
func NewMockStorageReader(ctrl *gomock.Controller) *MockStorageReader {
	mock := &MockStorageReader{ctrl: ctrl}
	mock.recorder = &MockStorageReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageReader) EXPECT() *MockStorageReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockStorageReader) Read(ctx context.Context, location string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, location)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageReaderMockRecorder) Read(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageReader)(nil).Read), ctx, location)
}

// MockStorageDeleter is a mock of StorageDeleter interface
type MockStorageDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDeleterMockRecorder
}

// MockStorageDeleterMockRecorder is the mock recorder for MockStorageDeleter
type MockStorageDeleterMockRecorder struct {
	mock *MockStorageDeleter
}

// NewMockStorageDeleter creates a new mock instance
func NewMockStorageDeleter(ctrl *gomock.Controller) *MockStorageDeleter {
	mock := &MockStorageDeleter{ctrl: ctrl}
	mock.recorder = &MockStorageDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageDeleter) EXPECT() *MockStorageDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockStorageDeleter) Delete(ctx context.Context, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageDeleterMockRecorder) Delete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageDeleter)(nil).Delete), ctx, location)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockStorage) Write(ctx context.Context, location string, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, location, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockStorageMockRecorder) Write(ctx, location, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), ctx, location, r)
}

// Read mocks base method
func (m *MockStorage) Read(ctx context.Context, location string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, location)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageMockRecorder) Read(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), ctx, location)
}

// Delete mocks base method
func (m *MockStorage) Delete(ctx context.Context, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, location)
}
